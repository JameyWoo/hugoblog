<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 姬小野的部落</title>
    <link>https://fiveplus.top/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 姬小野的部落</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 02 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fiveplus.top/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>随机树生成算法 就是树! </title>
      <link>https://fiveplus.top/post/%E9%9A%8F%E6%9C%BA%E6%A0%91%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95-%E5%B0%B1%E6%98%AF%E6%A0%91/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E9%9A%8F%E6%9C%BA%E6%A0%91%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95-%E5%B0%B1%E6%98%AF%E6%A0%91/</guid>
      <description>一个生成随机树（此树非彼数）的算法，树的结点编号从1开始，这个算法生成了树的结点个数、树的结点的权值、树的每条边的结点。 如下面是一棵10结点</description>
    </item>
    
    <item>
      <title>IDA Star算法解十六宫格拼图问题</title>
      <link>https://fiveplus.top/post/ida-star%E7%AE%97%E6%B3%95%E8%A7%A3%E5%8D%81%E5%85%AD%E5%AE%AB%E6%A0%BC%E6%8B%BC%E5%9B%BE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/ida-star%E7%AE%97%E6%B3%95%E8%A7%A3%E5%8D%81%E5%85%AD%E5%AE%AB%E6%A0%BC%E6%8B%BC%E5%9B%BE%E9%97%AE%E9%A2%98/</guid>
      <description>IDA*算法, ID(Iterative Deepening)指的是迭代加深. 它的思想是重复进行限制最大深度的深度优先搜索(此限制从某个最小值遍历到最大值), 也称为深</description>
    </item>
    
    <item>
      <title>数组中出现次数超过一半的数字</title>
      <link>https://fiveplus.top/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>用头脑风暴学算法，对于一个问题，我们不只是要解决它，还要去思考有什么好的方法，差的方法去解决，甚至是一些错误的但可以提供思想借鉴的方法。 此问</description>
    </item>
    
    <item>
      <title>Tarjan算法缩点&#43;DAG最长路 DP</title>
      <link>https://fiveplus.top/post/tarjan%E7%AE%97%E6%B3%95%E7%BC%A9%E7%82%B9&#43;dag%E6%9C%80%E9%95%BF%E8%B7%AF-dp/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/tarjan%E7%AE%97%E6%B3%95%E7%BC%A9%E7%82%B9&#43;dag%E6%9C%80%E9%95%BF%E8%B7%AF-dp/</guid>
      <description>我们按照复杂程度来讨论不同的Tarjan算法变形的差异. 第一个问题: Tarjan算法找出一个图里面的全部强连通分量(包括单独的点). 但此时只</description>
    </item>
    
    <item>
      <title>斐波那契_矩阵快速幂解法</title>
      <link>https://fiveplus.top/post/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91_%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E8%A7%A3%E6%B3%95/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91_%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E8%A7%A3%E6%B3%95/</guid>
      <description>学过矩阵学了矩阵再看斐波那契数列, 秒懂, 结合矩阵快速幂, 加深了一个概念的理解: 矩阵也就是一个基本的计算单位. 矩阵快速幂解法其实就是快速幂+矩</description>
    </item>
    
    <item>
      <title>倍增法求Lca-最近公共祖先</title>
      <link>https://fiveplus.top/post/%E5%80%8D%E5%A2%9E%E6%B3%95%E6%B1%82lca-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E5%80%8D%E5%A2%9E%E6%B3%95%E6%B1%82lca-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <description>一. 明确问题 看标题便知道了, 这篇博客力求解决的问题是求出一棵树的两个结点的最近公共祖先(LCA), 方法是倍增法. 那么什么是Lca呢? 它是一棵</description>
    </item>
    
    <item>
      <title>DP_最长不下降子序列_LIS</title>
      <link>https://fiveplus.top/post/dp_%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97_lis/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/dp_%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97_lis/</guid>
      <description>序言 同类的问题还有*&amp;ldquo;最长上升子序列&amp;rdquo;, &amp;ldquo;最长下降子序列&amp;rdquo;, &amp;hellip;* 他们的不同就在于定义的core</description>
    </item>
    
    <item>
      <title>DP_最长回文子串</title>
      <link>https://fiveplus.top/post/dp_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/dp_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>####DP问题, 最长回文子串 最长回文子串问题指的是在一个字符串中, 是回文子串的长度的最大值. 这里的回文子串是连续的. 如字符串&amp;quot;P</description>
    </item>
    
    <item>
      <title>离散数学_C&#43;&#43;生成真值表_模拟</title>
      <link>https://fiveplus.top/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6_c&#43;&#43;%E7%94%9F%E6%88%90%E7%9C%9F%E5%80%BC%E8%A1%A8_%E6%A8%A1%E6%8B%9F/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6_c&#43;&#43;%E7%94%9F%E6%88%90%E7%9C%9F%E5%80%BC%E8%A1%A8_%E6%A8%A1%E6%8B%9F/</guid>
      <description>生成真值表的代码 输入一个真值表达式, 程序自动生成它的真值表. 纯模拟思路 合取* 析取| 单条件&amp;gt; 双条件- 非! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>主元素问题_奇妙的思维</title>
      <link>https://fiveplus.top/post/%E4%B8%BB%E5%85%83%E7%B4%A0%E9%97%AE%E9%A2%98_%E5%A5%87%E5%A6%99%E7%9A%84%E6%80%9D%E7%BB%B4/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E4%B8%BB%E5%85%83%E7%B4%A0%E9%97%AE%E9%A2%98_%E5%A5%87%E5%A6%99%E7%9A%84%E6%80%9D%E7%BB%B4/</guid>
      <description>主元素问题 什么是主元素问题? 已知一个数组的大小，并且其中存在一个数，出现的频率大于50%，则称其为该数组的主元素。用一个算法找出这个数，要求</description>
    </item>
    
    <item>
      <title>最大子段和_三种方法</title>
      <link>https://fiveplus.top/post/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C_%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C_%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>今天参加了一场洛谷网的比赛, 深受打击. 寒假过了这么多天, 一直没有认真学习算法, 以至于现在的水平比两个月前还要低. 本来就没有多少底子, 又退步了</description>
    </item>
    
    <item>
      <title>初步数论 扩展欧几里得 线性同余方程</title>
      <link>https://fiveplus.top/post/%E5%88%9D%E6%AD%A5%E6%95%B0%E8%AE%BA-%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97-%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E5%88%9D%E6%AD%A5%E6%95%B0%E8%AE%BA-%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97-%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/</guid>
      <description>这篇博客我将介绍数论中的扩展欧几里得算法(extended Euclidean algorithm ),以及其在**解线性同余方程(乘法逆元)**中的运用. 首先要了解几个概念: 欧</description>
    </item>
    
  </channel>
</rss>