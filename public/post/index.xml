<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 姬小野的部落</title>
    <link>https://fiveplus.top/post/</link>
    <description>Recent content in Posts on 姬小野的部落</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Mar 2020 13:47:39 +0800</lastBuildDate>
    
	<atom:link href="https://fiveplus.top/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Wsl 安装mysql5.7初始化密码</title>
      <link>https://fiveplus.top/post/wsl-%E5%AE%89%E8%A3%85mysql5.7%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/</link>
      <pubDate>Mon, 30 Mar 2020 13:47:39 +0800</pubDate>
      
      <guid>https://fiveplus.top/post/wsl-%E5%AE%89%E8%A3%85mysql5.7%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%86%E7%A0%81/</guid>
      <description>在 wsl 里 安装 mysql5.7, 设置密码的时候折腾了半天, 看了几十个教程, 都没用, 最后终于看到了一篇, 解决了问题, 特此记录. [最后帮我解决问题的是这篇博客](u</description>
    </item>
    
    <item>
      <title>实现c语言的memcpy函数</title>
      <link>https://fiveplus.top/post/%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%9A%84memcpy%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 22 Mar 2020 14:07:21 +0800</pubDate>
      
      <guid>https://fiveplus.top/post/%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%9A%84memcpy%E5%87%BD%E6%95%B0/</guid>
      <description>实现c语言的memcpy函数 C 库函数 void *memcpy(void *str1, const void *str2, size_t n) 从存储区 str2 复制 n 个字符到存储区 str1。 实现这个函数需要注意以下几个点: 传递进入memc</description>
    </item>
    
    <item>
      <title>条件变量与生产者消费者问题</title>
      <link>https://fiveplus.top/post/%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F%E4%B8%8E%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 16 Dec 2019 11:36:23 +0800</pubDate>
      
      <guid>https://fiveplus.top/post/%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F%E4%B8%8E%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</guid>
      <description>本文主要是探讨&amp;laquo;操作系统导论&amp;raquo;一书第30章-条件变量的知识. 书中介绍了条件变量的概念, 并将条件变量运用在生产者消费者</description>
    </item>
    
    <item>
      <title>正则表达式转化为DFA状态图</title>
      <link>https://fiveplus.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%8C%96%E4%B8%BAdfa%E7%8A%B6%E6%80%81%E5%9B%BE/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%8C%96%E4%B8%BAdfa%E7%8A%B6%E6%80%81%E5%9B%BE/</guid>
      <description>话不多说, 这是一个将正则表达式转化为DFA状态图的小工具, 是在做编译原理实验的时候在基础实验之上进行扩展的. demo: ./main -r &amp;ldquo;(a|b)*a&amp;rdquo; -o test.png 下面是文档和链接, 欢</description>
    </item>
    
    <item>
      <title>Pthread多线程 创建,挂起,恢复,结束</title>
      <link>https://fiveplus.top/post/pthread%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%88%9B%E5%BB%BA%E6%8C%82%E8%B5%B7%E6%81%A2%E5%A4%8D%E7%BB%93%E6%9D%9F/</link>
      <pubDate>Tue, 15 Oct 2019 11:50:28 +0800</pubDate>
      
      <guid>https://fiveplus.top/post/pthread%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%88%9B%E5%BB%BA%E6%8C%82%E8%B5%B7%E6%81%A2%E5%A4%8D%E7%BB%93%E6%9D%9F/</guid>
      <description>@[toc] 线程的创建 在linux中, 多线程库为 pthread, 要包含头文件&amp;lt;pthread.h&amp;gt; 从一个最基本的多线程程序开始介绍 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    
    <item>
      <title>自编码器AutoEncoder</title>
      <link>https://fiveplus.top/post/%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8autoencoder/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8autoencoder/</guid>
      <description>一. 什么是自编码器 自动编码器 autoencoder, 简单表现编码器为将一组数据进行压缩编码(降维), 解码器将这组数据恢复成高维的数据. 这种编码和解码的过程不是无损</description>
    </item>
    
    <item>
      <title>Introduction to PyTorch 笔记</title>
      <link>https://fiveplus.top/post/introduction-to-pytorch%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/introduction-to-pytorch%E7%AC%94%E8%AE%B0/</guid>
      <description>Introduction to PyTorch 笔记 Part 1 - Tensors in PyTorch (Solution).ipynb 最基本的神经网络, 使用矩阵计算. 激活函数, sigmoid, softmax, relu等 使用pytorch生成随机数(用来初始化weights). 似</description>
    </item>
    
    <item>
      <title>利用迁移学习进行花的分类</title>
      <link>https://fiveplus.top/post/%E5%88%A9%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E8%BF%9B%E8%A1%8C%E8%8A%B1%E7%9A%84%E5%88%86%E7%B1%BB/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E5%88%A9%E7%94%A8%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E8%BF%9B%E8%A1%8C%E8%8A%B1%E7%9A%84%E5%88%86%E7%B1%BB/</guid>
      <description>前几天写了个小项目, 利用深度学习里的迁移学习方法做花的分类, 下面是项目的github地址. https://github.com/JameyWoo/transfer-learning 感兴趣的同学可以了解一下, 源码比较简单, 下面是项</description>
    </item>
    
    <item>
      <title>IDEA及其他开发工具日常使用指南</title>
      <link>https://fiveplus.top/post/idea%E5%8F%8A%E5%85%B6%E4%BB%96%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/idea%E5%8F%8A%E5%85%B6%E4%BB%96%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>1. 引入依赖包 通过如图所示的路径添加tar文件, 即可引入外部包. 2. 单独运行一个java文件 在java文件上右键, 如果你写好了main函数就可以</description>
    </item>
    
    <item>
      <title>Darknet  目标检测开源库学习记录</title>
      <link>https://fiveplus.top/post/darknet-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E5%BC%80%E6%BA%90%E5%BA%93%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/darknet-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E5%BC%80%E6%BA%90%E5%BA%93%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid>
      <description>1. 效果展示 官网链接 darknet 实现了c语言版本的yolo v3, 不依赖任何其他库. 因此安装非常简单. 效果图: 2. 安装方法 如何安装? 1 2 3 git clone https://github.com/pjreddie/darknet cd darknet make 然后下载y</description>
    </item>
    
    <item>
      <title>使用face_recognition进行人脸特征检测</title>
      <link>https://fiveplus.top/post/%E4%BD%BF%E7%94%A8face_recognition%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E7%89%B9%E5%BE%81%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E4%BD%BF%E7%94%A8face_recognition%E8%BF%9B%E8%A1%8C%E4%BA%BA%E8%84%B8%E7%89%B9%E5%BE%81%E6%A3%80%E6%B5%8B/</guid>
      <description>效果图 调用face_recognition.face_landmarks()方法即可得到人脸特征点, 返回一个字典, 下图是返回的数据, 包括ch</description>
    </item>
    
    <item>
      <title>优雅地使用ubuntu18之二</title>
      <link>https://fiveplus.top/post/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8ubuntu18.04-%E4%BA%8C/</link>
      <pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8ubuntu18.04-%E4%BA%8C/</guid>
      <description>文章链接 优雅地使用ubuntu18.04（一） 优雅地使用ubuntu18.04（二） 12、设置默认终端 使用命令sudo update-alternatives --config x-terminal-emulator 然后就可以选择了</description>
    </item>
    
    <item>
      <title>优雅地使用ubuntu18之一</title>
      <link>https://fiveplus.top/post/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8ubuntu18.04-%E4%B8%80/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8ubuntu18.04-%E4%B8%80/</guid>
      <description>文章链接 优雅地使用ubuntu18.04（一） 优雅地使用ubuntu18.04（二） 1、ubuntu 截图 理论上来说应该是可以直接下面这样，但</description>
    </item>
    
    <item>
      <title>Opencv Python 人脸识别尝试——knn与深度学习</title>
      <link>https://fiveplus.top/post/opencv-python-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%B0%9D%E8%AF%95knn%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/opencv-python-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%B0%9D%E8%AF%95knn%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</guid>
      <description>引言 人脸识别和人脸检测不同，人脸检测时检测到人脸位置，而人脸识别是基于人脸数据库，进行一些识别操作如识别某一个人像是数据库中的哪个标签。 需要</description>
    </item>
    
    <item>
      <title>Anaconda虚拟环境及PyCharm项目环境设置</title>
      <link>https://fiveplus.top/post/anaconda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%8F%8Apycharm%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/anaconda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%8F%8Apycharm%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</guid>
      <description>Anaconda虚拟环境 1、创建环境 conda create --name your_env_name python=3.6 或者 conda create -n your_env_name python=3.7 新建一个环境 2、查看环境 进入Anaconda Prompt，使用conda info -e查</description>
    </item>
    
    <item>
      <title>随机树生成算法 就是树! </title>
      <link>https://fiveplus.top/post/%E9%9A%8F%E6%9C%BA%E6%A0%91%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95-%E5%B0%B1%E6%98%AF%E6%A0%91/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E9%9A%8F%E6%9C%BA%E6%A0%91%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95-%E5%B0%B1%E6%98%AF%E6%A0%91/</guid>
      <description>一个生成随机树（此树非彼数）的算法，树的结点编号从1开始，这个算法生成了树的结点个数、树的结点的权值、树的每条边的结点。 如下面是一棵10结点</description>
    </item>
    
    <item>
      <title>Handson Ml Chp2</title>
      <link>https://fiveplus.top/post/handson-ml-chp2/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/handson-ml-chp2/</guid>
      <description>批量学习（batch learning），一次性批量输入给学习算法，可以被形象的称为填鸭式学习。 在线学习（online learning），按照</description>
    </item>
    
    <item>
      <title>Csapp Datalab实验</title>
      <link>https://fiveplus.top/post/csapp-datalab%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/csapp-datalab%E5%AE%9E%E9%AA%8C/</guid>
      <description>datalab 实验 代码如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63</description>
    </item>
    
    <item>
      <title>汇编与gdb调试学习</title>
      <link>https://fiveplus.top/post/%E6%B1%87%E7%BC%96%E4%B8%8Egdb%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E6%B1%87%E7%BC%96%E4%B8%8Egdb%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0/</guid>
      <description>1、在gdb中如何列出汇编代码 应该是不可以用list 命令列出汇编代码的。 但可以使用display /i $pc 命令在调试的时候出了列出一行源码，也列出</description>
    </item>
    
    <item>
      <title>Ubuntu常见命令及使用技巧</title>
      <link>https://fiveplus.top/post/ubuntu%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/ubuntu%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>一个查询Linux命令比较方便的网址http://man.linuxde.net/ 1、在ubuntu 12.04系统中，使用Ctrl+Alt+</description>
    </item>
    
    <item>
      <title>高斯朴素贝叶斯方法进行鸢尾花分类</title>
      <link>https://fiveplus.top/post/%E9%AB%98%E6%96%AF%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%88%86%E7%B1%BB/</link>
      <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E9%AB%98%E6%96%AF%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%88%86%E7%B1%BB/</guid>
      <description>贝叶斯方法完整代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import seaborn as sns iris = sns.load_dataset(&amp;#39;iris&amp;#39;) X_iris = iris.drop(&amp;#39;species&amp;#39;, axis=1) y_iris = iris[&amp;#39;species&amp;#39;] print(X_iris) from sklearn.cross_validation import train_test_split Xtrain, Xtest, ytrain, ytest = train_test_split(X_iris, y_iris, random_state=1) from sklearn.naive_bayes import GaussianNB model = GaussianNB() model.fit(Xtrain, ytrain) y_model = model.predict(Xtest) from sklearn.metrics import accuracy_score accuracy_score(ytest,</description>
    </item>
    
    <item>
      <title>IDA Star算法解十六宫格拼图问题</title>
      <link>https://fiveplus.top/post/ida-star%E7%AE%97%E6%B3%95%E8%A7%A3%E5%8D%81%E5%85%AD%E5%AE%AB%E6%A0%BC%E6%8B%BC%E5%9B%BE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/ida-star%E7%AE%97%E6%B3%95%E8%A7%A3%E5%8D%81%E5%85%AD%E5%AE%AB%E6%A0%BC%E6%8B%BC%E5%9B%BE%E9%97%AE%E9%A2%98/</guid>
      <description>IDA*算法, ID(Iterative Deepening)指的是迭代加深. 它的思想是重复进行限制最大深度的深度优先搜索(此限制从某个最小值遍历到最大值), 也称为深</description>
    </item>
    
    <item>
      <title>Chrome浏览器使用指南</title>
      <link>https://fiveplus.top/post/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>目录 废话 从ie到国产，从国产到火狐，最后终于到了Chrome，这条路可谓是曲折，与Chrome相见恨晚。用过这么多浏览器，对现在用的Chro</description>
    </item>
    
    <item>
      <title>数组中出现次数超过一半的数字</title>
      <link>https://fiveplus.top/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>用头脑风暴学算法，对于一个问题，我们不只是要解决它，还要去思考有什么好的方法，差的方法去解决，甚至是一些错误的但可以提供思想借鉴的方法。 此问</description>
    </item>
    
    <item>
      <title>Python实现简单分类器</title>
      <link>https://fiveplus.top/post/python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%88%86%E7%B1%BB%E5%99%A8/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%88%86%E7%B1%BB%E5%99%A8/</guid>
      <description>今天重新开始学习机器学习，训练了一个简单的分类器。 如何工作的呢？给定一组训练数据，他们的参数有三个，x轴坐标，y轴坐标，类别。即(x, y, c)</description>
    </item>
    
    <item>
      <title>Tarjan算法缩点&#43;DAG最长路 DP</title>
      <link>https://fiveplus.top/post/tarjan%E7%AE%97%E6%B3%95%E7%BC%A9%E7%82%B9&#43;dag%E6%9C%80%E9%95%BF%E8%B7%AF-dp/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/tarjan%E7%AE%97%E6%B3%95%E7%BC%A9%E7%82%B9&#43;dag%E6%9C%80%E9%95%BF%E8%B7%AF-dp/</guid>
      <description>我们按照复杂程度来讨论不同的Tarjan算法变形的差异. 第一个问题: Tarjan算法找出一个图里面的全部强连通分量(包括单独的点). 但此时只</description>
    </item>
    
    <item>
      <title>斐波那契_矩阵快速幂解法</title>
      <link>https://fiveplus.top/post/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91_%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E8%A7%A3%E6%B3%95/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91_%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E8%A7%A3%E6%B3%95/</guid>
      <description>学过矩阵学了矩阵再看斐波那契数列, 秒懂, 结合矩阵快速幂, 加深了一个概念的理解: 矩阵也就是一个基本的计算单位. 矩阵快速幂解法其实就是快速幂+矩</description>
    </item>
    
    <item>
      <title>倍增法求Lca-最近公共祖先</title>
      <link>https://fiveplus.top/post/%E5%80%8D%E5%A2%9E%E6%B3%95%E6%B1%82lca-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E5%80%8D%E5%A2%9E%E6%B3%95%E6%B1%82lca-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <description>一. 明确问题 看标题便知道了, 这篇博客力求解决的问题是求出一棵树的两个结点的最近公共祖先(LCA), 方法是倍增法. 那么什么是Lca呢? 它是一棵</description>
    </item>
    
    <item>
      <title>DP_最长不下降子序列_LIS</title>
      <link>https://fiveplus.top/post/dp_%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97_lis/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/dp_%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97_lis/</guid>
      <description>序言 同类的问题还有*&amp;ldquo;最长上升子序列&amp;rdquo;, &amp;ldquo;最长下降子序列&amp;rdquo;, &amp;hellip;* 他们的不同就在于定义的core</description>
    </item>
    
    <item>
      <title>DP_最长回文子串</title>
      <link>https://fiveplus.top/post/dp_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/dp_%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description>####DP问题, 最长回文子串 最长回文子串问题指的是在一个字符串中, 是回文子串的长度的最大值. 这里的回文子串是连续的. 如字符串&amp;quot;P</description>
    </item>
    
    <item>
      <title>离散数学_C&#43;&#43;生成真值表_模拟</title>
      <link>https://fiveplus.top/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6_c&#43;&#43;%E7%94%9F%E6%88%90%E7%9C%9F%E5%80%BC%E8%A1%A8_%E6%A8%A1%E6%8B%9F/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6_c&#43;&#43;%E7%94%9F%E6%88%90%E7%9C%9F%E5%80%BC%E8%A1%A8_%E6%A8%A1%E6%8B%9F/</guid>
      <description>生成真值表的代码 输入一个真值表达式, 程序自动生成它的真值表. 纯模拟思路 合取* 析取| 单条件&amp;gt; 双条件- 非! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>主元素问题_奇妙的思维</title>
      <link>https://fiveplus.top/post/%E4%B8%BB%E5%85%83%E7%B4%A0%E9%97%AE%E9%A2%98_%E5%A5%87%E5%A6%99%E7%9A%84%E6%80%9D%E7%BB%B4/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E4%B8%BB%E5%85%83%E7%B4%A0%E9%97%AE%E9%A2%98_%E5%A5%87%E5%A6%99%E7%9A%84%E6%80%9D%E7%BB%B4/</guid>
      <description>主元素问题 什么是主元素问题? 已知一个数组的大小，并且其中存在一个数，出现的频率大于50%，则称其为该数组的主元素。用一个算法找出这个数，要求</description>
    </item>
    
    <item>
      <title>最大子段和_三种方法</title>
      <link>https://fiveplus.top/post/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C_%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C_%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>今天参加了一场洛谷网的比赛, 深受打击. 寒假过了这么多天, 一直没有认真学习算法, 以至于现在的水平比两个月前还要低. 本来就没有多少底子, 又退步了</description>
    </item>
    
    <item>
      <title>初步数论 扩展欧几里得 线性同余方程</title>
      <link>https://fiveplus.top/post/%E5%88%9D%E6%AD%A5%E6%95%B0%E8%AE%BA-%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97-%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fiveplus.top/post/%E5%88%9D%E6%AD%A5%E6%95%B0%E8%AE%BA-%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97-%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/</guid>
      <description>这篇博客我将介绍数论中的扩展欧几里得算法(extended Euclidean algorithm ),以及其在**解线性同余方程(乘法逆元)**中的运用. 首先要了解几个概念: 欧</description>
    </item>
    
  </channel>
</rss>